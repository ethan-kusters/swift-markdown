{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Essentials",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/childcount",
                "title" : "var childCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/children",
                "title" : "var children: MarkupChildren",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/detachedfromparent",
                "title" : "var detachedFromParent: Markup",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/indexinparent",
                "title" : "var indexInParent: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/parent",
                "title" : "var parent: Markup?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/range",
                "title" : "var range: SourceRange?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/root",
                "title" : "var root: Markup",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/accept(_:)",
                "title" : "func accept<V>(inout V) -> V.Result",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/child(at:)",
                "title" : "func child(at: Int) -> Markup?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/child(through:)-5nioe",
                "title" : "func child(through: ChildIndexPath.Element...) -> Markup?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/child(through:)-6yfpl",
                "title" : "func child<S>(through: S) -> Markup?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/child(through:)-88rrx",
                "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/debugdescription(options:)",
                "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/format(options:)",
                "title" : "func format(options: MarkupFormatter.Options) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/hassamestructure(as:)",
                "title" : "func hasSameStructure(as: Markup) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/isidentical(to:)",
                "title" : "func isIdentical(to: Markup) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markup\/withuncheckedchildren(_:)",
                "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/markdown\/markup",
            "title" : "Markup",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/iterator\/next()",
                    "title" : "func next() -> Markup?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/markupchildren\/iterator",
                "title" : "MarkupChildren.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/markupchildren\/makeiterator()",
                "title" : "func makeIterator() -> MarkupChildren.Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/markupchildren\/reversed()",
                "title" : "func reversed() -> ReversedMarkupChildren",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/flatmap(_:)-5q10s",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/flatmap(_:)-7153h",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/map(_:)",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/sorted(using:)-6u7ba",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/sorted(using:)-9dn1x",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupchildren\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/markupchildren\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/markupchildren",
            "title" : "MarkupChildren",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/markdown\/childindexpath",
            "title" : "ChildIndexPath",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/element",
                "title" : "TypedChildIndexPath.Element",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/init(_:)",
                "title" : "init<S>(S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/init(arrayliteral:)",
                "title" : "init(arrayLiteral: TypedChildIndexPath.ArrayLiteralElement...)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/endindex",
                "title" : "var endIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/startindex",
                "title" : "var startIndex: Int",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/subscript(_:)-43ttc",
                "title" : "subscript(Int) -> TypedChildIndexPath.Element",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/typedchildindexpath\/arrayliteralelement",
                "title" : "TypedChildIndexPath.ArrayLiteralElement",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/formindex(before:)",
                    "title" : "func formIndex(before: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/typedchildindexpath\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/underestimatedcount-3t1uw",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/map(_:)-8mfng",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/subscript(_:)-1q3ub",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/subscript(_:)-252cf",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/subscript(_:)-76t40",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/markdown\/typedchildindexpath\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/typedchildindexpath\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/underestimatedcount-y81o",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/flatmap(_:)-1g0yf",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/flatmap(_:)-9m64s",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/map(_:)-9admj",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/sorted(using:)-2i119",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/sorted(using:)-6kbwo",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/typedchildindexpath\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/typedchildindexpath\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/typedchildindexpath",
            "title" : "TypedChildIndexPath",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargument\/hastrailingcomma",
                "title" : "var hasTrailingComma: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargument\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargument\/namerange",
                "title" : "var nameRange: SourceRange?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargument\/value",
                "title" : "var value: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargument\/valuerange",
                "title" : "var valueRange: SourceRange?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargument\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/markdown\/directiveargument\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/directiveargument",
            "title" : "DirectiveArgument",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/==(_:_:)",
                    "title" : "static func == (DirectiveArgumentText.LineSegment, DirectiveArgumentText.LineSegment) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/linestartindex",
                    "title" : "var lineStartIndex: String.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/parseindex",
                    "title" : "var parseIndex: String.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/range",
                    "title" : "var range: SourceRange?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/trimmedtext",
                    "title" : "var trimmedText: Substring",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/untrimmedtext",
                    "title" : "var untrimmedText: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/parsenamevaluearguments(parseerrors:)",
                    "title" : "func parseNameValueArguments(parseErrors: inout [DirectiveArgumentText.ParseError]) -> [DirectiveArgument]",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/directiveargumenttext\/linesegment",
                "title" : "DirectiveArgumentText.LineSegment",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargumenttext\/init(_:)",
                "title" : "init<S>(S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargumenttext\/init(segments:)",
                "title" : "init<Segments>(segments: Segments)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargumenttext\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargumenttext\/segments",
                "title" : "var segments: [DirectiveArgumentText.LineSegment]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargumenttext\/parsenamevaluearguments()",
                "title" : "func parseNameValueArguments() -> [DirectiveArgument]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/directiveargumenttext\/parsenamevaluearguments(parseerrors:)",
                "title" : "func parseNameValueArguments(parseErrors: inout [DirectiveArgumentText.ParseError]) -> [DirectiveArgument]",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/parseerror\/duplicateargument(name:firstlocation:duplicatelocation:)",
                    "title" : "case duplicateArgument(name: String, firstLocation: SourceLocation, duplicateLocation: SourceLocation)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/parseerror\/missingexpectedcharacter(_:location:)",
                    "title" : "case missingExpectedCharacter(Character, location: SourceLocation)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/parseerror\/unexpectedcharacter(_:location:)",
                    "title" : "case unexpectedCharacter(Character, location: SourceLocation)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/directiveargumenttext\/parseerror\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/parseerror\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/directiveargumenttext\/parseerror",
                "title" : "DirectiveArgumentText.ParseError",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/directiveargumenttext\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/markdown\/directiveargumenttext\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/directiveargumenttext",
            "title" : "DirectiveArgumentText",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/document\/init(parsing:options:)",
                "title" : "init(parsing: URL, options: ParseOptions) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/markdown\/document\/init(parsing:source:options:)",
                "title" : "init(parsing: String, source: URL?, options: ParseOptions)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/init(_:)-4yrub",
                    "title" : "init(BlockMarkup...)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/init(_:)-5ps84",
                    "title" : "init<Children>(Children)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/markdown\/document\/basicblockcontainer-implementations",
                "title" : "BasicBlockContainer Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/blockchildren",
                    "title" : "var blockChildren: LazyMapSequence<MarkupChildren, BlockMarkup>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/replacechildreninrange(_:with:)",
                    "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/setblockchildren(_:)",
                    "title" : "func setBlockChildren<Items>(Items)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/document\/blockcontainer-implementations",
                "title" : "BlockContainer Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/childcount",
                    "title" : "var childCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/children",
                    "title" : "var children: MarkupChildren",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/detachedfromparent",
                    "title" : "var detachedFromParent: Markup",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/indexinparent",
                    "title" : "var indexInParent: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/parent",
                    "title" : "var parent: Markup?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/range",
                    "title" : "var range: SourceRange?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/root",
                    "title" : "var root: Markup",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/accept(_:)",
                    "title" : "func accept<V>(inout V) -> V.Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/child(at:)",
                    "title" : "func child(at: Int) -> Markup?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/child(through:)",
                    "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/debugdescription(options:)",
                    "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/format(options:)",
                    "title" : "func format(options: MarkupFormatter.Options) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/hassamestructure(as:)",
                    "title" : "func hasSameStructure(as: Markup) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/isidentical(to:)",
                    "title" : "func isIdentical(to: Markup) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/document\/withuncheckedchildren(_:)",
                    "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/document\/markup-implementations",
                "title" : "Markup Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/document",
            "title" : "Document",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/literalmarkup\/init(_:)",
                "title" : "init(String)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/markdown\/literalmarkup",
            "title" : "LiteralMarkup",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/markdown\/inlinecontainer\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "InlineContainer Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/markdown\/plaintextconvertiblemarkup\/plaintext",
                "title" : "var plainText: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/markdown\/plaintextconvertiblemarkup",
            "title" : "PlainTextConvertibleMarkup",
            "type" : "protocol"
          },
          {
            "title" : "Markup Types",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Block Container Blocks",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/blockdirective\/init(name:argumenttext:children:)-3w3qk",
                    "title" : "init(name: String, argumentText: String?, children: BlockMarkup...)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/blockdirective\/init(name:argumenttext:children:)-71hek",
                    "title" : "init<Children>(name: String, argumentText: String?, children: Children)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/blockdirective\/argumenttext",
                    "title" : "var argumentText: DirectiveArgumentText",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/blockdirective\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/blockdirective\/namelocation",
                    "title" : "var nameLocation: SourceLocation?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/blockdirective\/namerange",
                    "title" : "var nameRange: SourceRange?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/blockchildren",
                        "title" : "var blockChildren: LazyMapSequence<MarkupChildren, BlockMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/setblockchildren(_:)",
                        "title" : "func setBlockChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/blockdirective\/blockcontainer-implementations",
                    "title" : "BlockContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockdirective\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/blockdirective\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/blockdirective",
                "title" : "BlockDirective",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/init(_:)-5fbhd",
                        "title" : "init<Children>(Children)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/init(_:)-6dub7",
                        "title" : "init(BlockMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/blockquote\/basicblockcontainer-implementations",
                    "title" : "BasicBlockContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/blockchildren",
                        "title" : "var blockChildren: LazyMapSequence<MarkupChildren, BlockMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/setblockchildren(_:)",
                        "title" : "func setBlockChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/blockquote\/blockcontainer-implementations",
                    "title" : "BlockContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/blockquote\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/blockquote\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/blockquote",
                "title" : "BlockQuote",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/init(_:)-43dot",
                        "title" : "init<Children>(Children)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/init(_:)-ftr2",
                        "title" : "init(BlockMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/customblock\/basicblockcontainer-implementations",
                    "title" : "BasicBlockContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/blockchildren",
                        "title" : "var blockChildren: LazyMapSequence<MarkupChildren, BlockMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/setblockchildren(_:)",
                        "title" : "func setBlockChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/customblock\/blockcontainer-implementations",
                    "title" : "BlockContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/customblock\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/customblock\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/customblock",
                "title" : "CustomBlock",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/listitem\/init(checkbox:_:)-1icje",
                    "title" : "init(checkbox: Checkbox?, BlockMarkup...)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/listitem\/init(checkbox:_:)-686dm",
                    "title" : "init<Children>(checkbox: Checkbox?, Children)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/listitem\/checkbox",
                    "title" : "var checkbox: Checkbox?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/blockchildren",
                        "title" : "var blockChildren: LazyMapSequence<MarkupChildren, BlockMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/setblockchildren(_:)",
                        "title" : "func setBlockChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/listitem\/blockcontainer-implementations",
                    "title" : "BlockContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitem\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/listitem\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/listitem",
                "title" : "ListItem",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/init(_:)-4ywqf",
                        "title" : "init<Items>(Items)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/init(_:)-4zbwk",
                        "title" : "init(ListItem...)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/init(_:)-7v1c5",
                        "title" : "init(ListItem)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/listitems",
                        "title" : "var listItems: LazyMapSequence<MarkupChildren, ListItem>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/appenditem(_:)",
                        "title" : "func appendItem(ListItem)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/replaceitemsinrange(_:with:)",
                        "title" : "func replaceItemsInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/setlistitems(_:)",
                        "title" : "func setListItems<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/orderedlist\/listitemcontainer-implementations",
                    "title" : "ListItemContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/orderedlist\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/orderedlist\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/orderedlist",
                "title" : "OrderedList",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/init(_:)-6e1cw",
                        "title" : "init(ListItem...)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/init(_:)-7dxdg",
                        "title" : "init<Items>(Items)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/init(_:)-9nv34",
                        "title" : "init(ListItem)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/listitems",
                        "title" : "var listItems: LazyMapSequence<MarkupChildren, ListItem>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/appenditem(_:)",
                        "title" : "func appendItem(ListItem)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/replaceitemsinrange(_:with:)",
                        "title" : "func replaceItemsInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/setlistitems(_:)",
                        "title" : "func setListItems<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/unorderedlist\/listitemcontainer-implementations",
                    "title" : "ListItemContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/unorderedlist\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/unorderedlist\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/unorderedlist",
                "title" : "UnorderedList",
                "type" : "struct"
              },
              {
                "title" : "Inline Container Blocks",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/init(_:)-31f0j",
                        "title" : "init<Children>(Children)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/init(_:)-896oc",
                        "title" : "init(InlineMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/paragraph\/basicinlinecontainer-implementations",
                    "title" : "BasicInlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/paragraph\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/paragraph\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/paragraph\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/paragraph\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/paragraph",
                "title" : "Paragraph",
                "type" : "struct"
              },
              {
                "title" : "Leaf Blocks",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/heading\/init(level:_:)-55307",
                    "title" : "init(level: Int, InlineMarkup...)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/heading\/init(level:_:)-8x7sr",
                    "title" : "init<Children>(level: Int, Children)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/heading\/level",
                    "title" : "var level: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/heading\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/heading\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/heading\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/heading\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/heading",
                "title" : "Heading",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/htmlblock\/rawhtml",
                    "title" : "var rawHTML: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/init(_:)",
                        "title" : "init(String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/htmlblock\/literalmarkup-implementations",
                    "title" : "LiteralMarkup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/htmlblock\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/htmlblock\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/htmlblock",
                "title" : "HTMLBlock",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/thematicbreak\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/thematicbreak\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/thematicbreak\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/thematicbreak",
                "title" : "ThematicBreak",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/codeblock\/init(language:_:)",
                    "title" : "init(language: String?, String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/codeblock\/code",
                    "title" : "var code: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/codeblock\/language",
                    "title" : "var language: String?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/codeblock\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/codeblock\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/codeblock",
                "title" : "CodeBlock",
                "type" : "struct"
              },
              {
                "title" : "Tables",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/init(_:)-49tor",
                        "title" : "init<Rows>(Rows)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/init(_:)-7t1dl",
                        "title" : "init(Table.Row...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/rows",
                        "title" : "var rows: LazyMapSequence<MarkupChildren, Table.Row>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/appendrow(_:)",
                        "title" : "func appendRow(Table.Row)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/replacerowsinrange(_:with:)",
                        "title" : "func replaceRowsInRange<Rows>(Range<Int>, with: Rows)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/setrows(_:)",
                        "title" : "func setRows<Rows>(Rows)",
                        "type" : "method"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/childcount",
                            "title" : "var childCount: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/children",
                            "title" : "var children: MarkupChildren",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/detachedfromparent",
                            "title" : "var detachedFromParent: Markup",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/indexinparent",
                            "title" : "var indexInParent: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/isempty",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/parent",
                            "title" : "var parent: Markup?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/range",
                            "title" : "var range: SourceRange?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/root",
                            "title" : "var root: Markup",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/accept(_:)",
                            "title" : "func accept<V>(inout V) -> V.Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/child(at:)",
                            "title" : "func child(at: Int) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/child(through:)",
                            "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/debugdescription(options:)",
                            "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/format(options:)",
                            "title" : "func format(options: MarkupFormatter.Options) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/hassamestructure(as:)",
                            "title" : "func hasSameStructure(as: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/isidentical(to:)",
                            "title" : "func isIdentical(to: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/body-swift.struct\/withuncheckedchildren(_:)",
                            "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/body-swift.struct\/markup-implementations",
                        "title" : "Markup Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/table\/body-swift.struct",
                    "title" : "Table.Body",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/init(_:)-29wfu",
                            "title" : "init<Children>(Children)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/init(_:)-374pp",
                            "title" : "init(InlineMarkup...)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/cell\/basicinlinecontainer-implementations",
                        "title" : "BasicInlineContainer Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/inlinechildren",
                            "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/replacechildreninrange(_:with:)",
                            "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/setinlinechildren(_:)",
                            "title" : "func setInlineChildren<Items>(Items)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/cell\/inlinecontainer-implementations",
                        "title" : "InlineContainer Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/childcount",
                            "title" : "var childCount: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/children",
                            "title" : "var children: MarkupChildren",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/detachedfromparent",
                            "title" : "var detachedFromParent: Markup",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/indexinparent",
                            "title" : "var indexInParent: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/isempty",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/parent",
                            "title" : "var parent: Markup?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/range",
                            "title" : "var range: SourceRange?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/root",
                            "title" : "var root: Markup",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/accept(_:)",
                            "title" : "func accept<V>(inout V) -> V.Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/child(at:)",
                            "title" : "func child(at: Int) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/child(through:)",
                            "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/debugdescription(options:)",
                            "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/format(options:)",
                            "title" : "func format(options: MarkupFormatter.Options) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/hassamestructure(as:)",
                            "title" : "func hasSameStructure(as: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/isidentical(to:)",
                            "title" : "func isIdentical(to: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/withuncheckedchildren(_:)",
                            "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/cell\/markup-implementations",
                        "title" : "Markup Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/cell\/plaintext",
                            "title" : "var plainText: String",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/cell\/plaintextconvertiblemarkup-implementations",
                        "title" : "PlainTextConvertibleMarkup Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/table\/cell",
                    "title" : "Table.Cell",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/init(arrayliteral:)",
                            "title" : "init(arrayLiteral: Table.Cell...)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/head-swift.struct\/expressiblebyarrayliteral-implementations",
                        "title" : "ExpressibleByArrayLiteral Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/childcount",
                            "title" : "var childCount: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/children",
                            "title" : "var children: MarkupChildren",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/detachedfromparent",
                            "title" : "var detachedFromParent: Markup",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/indexinparent",
                            "title" : "var indexInParent: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/isempty",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/parent",
                            "title" : "var parent: Markup?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/range",
                            "title" : "var range: SourceRange?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/root",
                            "title" : "var root: Markup",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/accept(_:)",
                            "title" : "func accept<V>(inout V) -> V.Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/child(at:)",
                            "title" : "func child(at: Int) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/child(through:)",
                            "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/debugdescription(options:)",
                            "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/format(options:)",
                            "title" : "func format(options: MarkupFormatter.Options) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/hassamestructure(as:)",
                            "title" : "func hasSameStructure(as: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/isidentical(to:)",
                            "title" : "func isIdentical(to: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/withuncheckedchildren(_:)",
                            "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/head-swift.struct\/markup-implementations",
                        "title" : "Markup Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/init(_:)-2mvsx",
                            "title" : "init<Cells>(Cells)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/init(_:)-8txq9",
                            "title" : "init(Table.Cell...)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/init(_:)-9brc6",
                            "title" : "init(Table.Cell)",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/cells",
                            "title" : "var cells: LazyMapSequence<MarkupChildren, Table.Cell>",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/appendcell(_:)",
                            "title" : "func appendCell(Table.Cell)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/replacecellsinrange(_:with:)",
                            "title" : "func replaceCellsInRange<Cells>(Range<Int>, with: Cells)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/head-swift.struct\/setcells(_:)",
                            "title" : "func setCells<Cells>(Cells)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/head-swift.struct\/tablecellcontainer-implementations",
                        "title" : "TableCellContainer Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/table\/head-swift.struct",
                    "title" : "Table.Head",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/init(arrayliteral:)",
                            "title" : "init(arrayLiteral: Table.Cell...)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/row\/expressiblebyarrayliteral-implementations",
                        "title" : "ExpressibleByArrayLiteral Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/childcount",
                            "title" : "var childCount: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/children",
                            "title" : "var children: MarkupChildren",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/detachedfromparent",
                            "title" : "var detachedFromParent: Markup",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/indexinparent",
                            "title" : "var indexInParent: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/isempty",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/parent",
                            "title" : "var parent: Markup?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/range",
                            "title" : "var range: SourceRange?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/root",
                            "title" : "var root: Markup",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/accept(_:)",
                            "title" : "func accept<V>(inout V) -> V.Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/child(at:)",
                            "title" : "func child(at: Int) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/child(through:)",
                            "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/debugdescription(options:)",
                            "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/format(options:)",
                            "title" : "func format(options: MarkupFormatter.Options) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/hassamestructure(as:)",
                            "title" : "func hasSameStructure(as: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/isidentical(to:)",
                            "title" : "func isIdentical(to: Markup) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/withuncheckedchildren(_:)",
                            "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/row\/markup-implementations",
                        "title" : "Markup Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/init(_:)-1u22a",
                            "title" : "init(Table.Cell)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/init(_:)-3zg7u",
                            "title" : "init(Table.Cell...)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/init(_:)-5wpll",
                            "title" : "init<Cells>(Cells)",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/cells",
                            "title" : "var cells: LazyMapSequence<MarkupChildren, Table.Cell>",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/appendcell(_:)",
                            "title" : "func appendCell(Table.Cell)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/replacecellsinrange(_:with:)",
                            "title" : "func replaceCellsInRange<Cells>(Range<Int>, with: Cells)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/row\/setcells(_:)",
                            "title" : "func setCells<Cells>(Cells)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/row\/tablecellcontainer-implementations",
                        "title" : "TableCellContainer Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/table\/row",
                    "title" : "Table.Row",
                    "type" : "struct"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/table\/init(columnalignments:header:body:)",
                    "title" : "init(columnAlignments: [Table.ColumnAlignment?]?, header: Table.Head, body: Table.Body)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/table\/body-swift.property",
                    "title" : "var body: Table.Body",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/table\/columnalignments",
                    "title" : "var columnAlignments: [Table.ColumnAlignment?]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/table\/head-swift.property",
                    "title" : "var head: Table.Head",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/table\/isempty-11if2",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/table\/maxcolumncount",
                    "title" : "var maxColumnCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/columnalignment\/center",
                        "title" : "case center",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/columnalignment\/left",
                        "title" : "case left",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/columnalignment\/right",
                        "title" : "case right",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/table\/columnalignment\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/table\/columnalignment\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/table\/columnalignment",
                    "title" : "Table.ColumnAlignment",
                    "type" : "enum"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/isempty-55qp6",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/table\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/table\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/table",
                "title" : "Table",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/tablecellcontainer\/init(_:)-825co",
                            "title" : "init(Table.Cell...)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/markdown\/tablecellcontainer\/init(_:)-91l80",
                            "title" : "init(Table.Cell)",
                            "type" : "init"
                          }
                        ],
                        "title" : "TableCellContainer Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/tablecellcontainer\/init(_:)-4lqa9",
                    "title" : "init<Cells>(Cells)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/tablecellcontainer\/cells",
                    "title" : "var cells: LazyMapSequence<MarkupChildren, Table.Cell>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/tablecellcontainer\/appendcell(_:)",
                    "title" : "func appendCell(Table.Cell)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/tablecellcontainer\/replacecellsinrange(_:with:)",
                    "title" : "func replaceCellsInRange<Cells>(Range<Int>, with: Cells)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/tablecellcontainer\/setcells(_:)",
                    "title" : "func setCells<Cells>(Cells)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/tablecellcontainer\/init(arrayliteral:)",
                        "title" : "init(arrayLiteral: Table.Cell...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/tablecellcontainer\/expressiblebyarrayliteral-implementations",
                    "title" : "ExpressibleByArrayLiteral Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/tablecellcontainer",
                "title" : "TableCellContainer",
                "type" : "protocol"
              }
            ],
            "path" : "\/documentation\/markdown\/blockmarkup",
            "title" : "Markup Block Nodes",
            "type" : "symbol"
          },
          {
            "children" : [
              {
                "title" : "Inline Container",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/init(_:)-2ygw",
                        "title" : "init<Children>(Children)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/init(_:)-6hx8v",
                        "title" : "init(InlineMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/emphasis\/basicinlinecontainer-implementations",
                    "title" : "BasicInlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/emphasis\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/emphasis\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/plaintext-3mmlg",
                        "title" : "var plainText: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/emphasis\/plaintext-81x03",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/emphasis\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/emphasis",
                "title" : "Emphasis",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/image\/init(source:title:_:)-20c6p",
                    "title" : "init(source: String?, title: String?, RecurringInlineMarkup...)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/image\/init(source:title:_:)-64pzi",
                    "title" : "init<Children>(source: String?, title: String?, Children)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/image\/source",
                    "title" : "var source: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/image\/title",
                    "title" : "var title: String?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/image\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/image\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/image\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/image\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/image",
                "title" : "Image",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/link\/init(destination:_:)-5zugi",
                    "title" : "init(destination: String, RecurringInlineMarkup...)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/link\/init(destination:_:)-9u2kw",
                    "title" : "init<Children>(destination: String?, Children)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/link\/destination",
                    "title" : "var destination: String?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/link\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/link\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/link\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/link\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/link",
                "title" : "Link",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/init(_:)-6y7cl",
                        "title" : "init<Children>(Children)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/init(_:)-92n51",
                        "title" : "init(InlineMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strikethrough\/basicinlinecontainer-implementations",
                    "title" : "BasicInlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strikethrough\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strikethrough\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/plaintext-7ugvz",
                        "title" : "var plainText: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strikethrough\/plaintext-86c96",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strikethrough\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/strikethrough",
                "title" : "Strikethrough",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/init(_:)-3wn5l",
                        "title" : "init(InlineMarkup...)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/init(_:)-6uxj6",
                        "title" : "init<Children>(Children)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strong\/basicinlinecontainer-implementations",
                    "title" : "BasicInlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/inlinechildren",
                        "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/replacechildreninrange(_:with:)",
                        "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/setinlinechildren(_:)",
                        "title" : "func setInlineChildren<Items>(Items)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strong\/inlinecontainer-implementations",
                    "title" : "InlineContainer Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strong\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/plaintext-5g53l",
                        "title" : "var plainText: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/strong\/plaintext-8q15j",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/strong\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/strong",
                "title" : "Strong",
                "type" : "struct"
              },
              {
                "title" : "Inline Leaves",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/custominline\/init(_:)",
                    "title" : "init(String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/custominline\/text",
                    "title" : "var text: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/custominline\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/custominline\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/custominline\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/custominline",
                "title" : "CustomInline",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/inlinecode\/init(_:)",
                    "title" : "init(String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/inlinecode\/code",
                    "title" : "var code: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/inlinecode\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinecode\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/inlinecode\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/inlinecode",
                "title" : "InlineCode",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/inlinehtml\/rawhtml",
                    "title" : "var rawHTML: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/init(_:)",
                        "title" : "init(String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/inlinehtml\/literalmarkup-implementations",
                    "title" : "LiteralMarkup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/inlinehtml\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/inlinehtml\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/inlinehtml\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/inlinehtml",
                "title" : "InlineHTML",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/linebreak\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/linebreak\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/linebreak\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/linebreak\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/linebreak",
                "title" : "LineBreak",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/softbreak\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/softbreak\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/softbreak\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/softbreak\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/softbreak",
                "title" : "SoftBreak",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/symbollink\/init(destination:)",
                    "title" : "init(destination: String?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/symbollink\/destination",
                    "title" : "var destination: String?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/symbollink\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/symbollink\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/symbollink\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/symbollink",
                "title" : "SymbolLink",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/text\/string",
                    "title" : "var string: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/init(_:)",
                        "title" : "init(String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/text\/literalmarkup-implementations",
                    "title" : "LiteralMarkup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/childcount",
                        "title" : "var childCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/children",
                        "title" : "var children: MarkupChildren",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/detachedfromparent",
                        "title" : "var detachedFromParent: Markup",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/indexinparent",
                        "title" : "var indexInParent: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/parent",
                        "title" : "var parent: Markup?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/range",
                        "title" : "var range: SourceRange?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/root",
                        "title" : "var root: Markup",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/accept(_:)",
                        "title" : "func accept<V>(inout V) -> V.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/child(at:)",
                        "title" : "func child(at: Int) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/child(through:)",
                        "title" : "func child(through: TypedChildIndexPath) -> Markup?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/debugdescription(options:)",
                        "title" : "func debugDescription(options: MarkupDumpOptions) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/format(options:)",
                        "title" : "func format(options: MarkupFormatter.Options) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/hassamestructure(as:)",
                        "title" : "func hasSameStructure(as: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/isidentical(to:)",
                        "title" : "func isIdentical(to: Markup) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/withuncheckedchildren(_:)",
                        "title" : "func withUncheckedChildren<Children>(Children) -> Markup",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/text\/markup-implementations",
                    "title" : "Markup Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/text\/plaintext",
                        "title" : "var plainText: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/text\/plaintextconvertiblemarkup-implementations",
                    "title" : "PlainTextConvertibleMarkup Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/text",
                "title" : "Text",
                "type" : "struct"
              }
            ],
            "path" : "\/documentation\/markdown\/inlinemarkup",
            "title" : "Markup Inline Nodes",
            "type" : "symbol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/aside\/init(_:)",
                "title" : "init(BlockQuote)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/aside\/content",
                "title" : "var content: [BlockMarkup]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/aside\/kind-swift.property",
                "title" : "var kind: Aside.Kind",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/attention",
                    "title" : "case attention",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/author",
                    "title" : "case author",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/authors",
                    "title" : "case authors",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/bug",
                    "title" : "case bug",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/complexity",
                    "title" : "case complexity",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/copyright",
                    "title" : "case copyright",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/date",
                    "title" : "case date",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/experiment",
                    "title" : "case experiment",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/important",
                    "title" : "case important",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/invariant",
                    "title" : "case invariant",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/mutatingvariant",
                    "title" : "case mutatingVariant",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/nonmutatingvariant",
                    "title" : "case nonMutatingVariant",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/note",
                    "title" : "case note",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/postcondition",
                    "title" : "case postcondition",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/precondition",
                    "title" : "case precondition",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/remark",
                    "title" : "case remark",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/requires",
                    "title" : "case requires",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/since",
                    "title" : "case since",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/throws",
                    "title" : "case `throws`",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/tip",
                    "title" : "case tip",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/todo",
                    "title" : "case todo",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/version",
                    "title" : "case version",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/warning",
                    "title" : "case warning",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/aside\/kind-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/aside\/kind-swift.enum",
                "title" : "Aside.Kind",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/markdown\/aside",
            "title" : "Aside",
            "type" : "struct"
          },
          {
            "title" : "Infrastructure",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Replacement",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/replacement\/init(range:replacementtext:)",
                    "title" : "init(range: SourceRange, replacementText: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/replacement\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/replacement\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/replacement\/range",
                    "title" : "var range: SourceRange",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/replacement\/replacementtext",
                    "title" : "var replacementText: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/markdown\/replacement",
                "title" : "Replacement",
                "type" : "struct"
              },
              {
                "title" : "Source",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/sourcelocation\/_(_:_:)-82hys",
                    "title" : "static func < (SourceLocation, SourceLocation) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/sourcelocation\/init(line:column:source:)",
                    "title" : "init(line: Int, column: Int, source: URL?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/sourcelocation\/column",
                    "title" : "var column: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/sourcelocation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/sourcelocation\/line",
                    "title" : "var line: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/sourcelocation\/source",
                    "title" : "var source: URL?",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'...(_:)-3f8uj",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'...(_:)-99oif",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/sourcelocation\/-implementations",
                    "title" : " Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'...(_:)-3f8uj",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'...(_:)-99oif",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/sourcelocation\/-implementations",
                    "title" : " Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/_(_:_:)-6dqry",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/_=(_:_:)-4jouw",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/_=(_:_:)-5307c",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/sourcelocation\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/sourcelocation\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/sourcelocation\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/sourcelocation",
                "title" : "SourceLocation",
                "type" : "struct"
              },
              {
                "path" : "\/documentation\/markdown\/sourcerange",
                "title" : "SourceRange",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/markdown\/infrastructure",
            "title" : "Infrastructure",
            "type" : "symbol"
          },
          {
            "title" : "Visit Markup",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Vistor",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Associated Types",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupvisitor\/result",
                    "title" : "Result",
                    "type" : "associatedtype"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/defaultvisit(_:)",
                            "title" : "func defaultVisit(Markup) -> Markup?",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupwalker\/defaultvisit(_:)",
                            "title" : "func defaultVisit(Markup)",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupWalker Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/defaultvisit(_:)",
                    "title" : "func defaultVisit(Markup) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visit(_:)-7yl0m",
                            "title" : "func visit(Markup) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visit(_:)-2170a",
                    "title" : "func visit(Markup) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitblockdirective(_:)",
                            "title" : "func visitBlockDirective(BlockDirective) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitblockdirective(_:)-49uv8",
                            "title" : "func visitBlockDirective(BlockDirective) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitblockdirective(_:)-8nalz",
                    "title" : "func visitBlockDirective(BlockDirective) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitblockquote(_:)",
                            "title" : "func visitBlockQuote(BlockQuote) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitblockquote(_:)-9he4b",
                            "title" : "func visitBlockQuote(BlockQuote) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitblockquote(_:)-7ktt2",
                    "title" : "func visitBlockQuote(BlockQuote) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitcodeblock(_:)",
                            "title" : "func visitCodeBlock(CodeBlock) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitcodeblock(_:)-37a4d",
                            "title" : "func visitCodeBlock(CodeBlock) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitcodeblock(_:)-71d5p",
                    "title" : "func visitCodeBlock(CodeBlock) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitcustomblock(_:)",
                            "title" : "func visitCustomBlock(CustomBlock) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitcustomblock(_:)-grvn",
                            "title" : "func visitCustomBlock(CustomBlock) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitcustomblock(_:)-5oact",
                    "title" : "func visitCustomBlock(CustomBlock) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitcustominline(_:)",
                            "title" : "func visitCustomInline(CustomInline) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitcustominline(_:)-8a21s",
                            "title" : "func visitCustomInline(CustomInline) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitcustominline(_:)-4fvd5",
                    "title" : "func visitCustomInline(CustomInline) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitdocument(_:)",
                            "title" : "func visitDocument(Document) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitdocument(_:)-6tgk2",
                            "title" : "func visitDocument(Document) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitdocument(_:)-1j4li",
                    "title" : "func visitDocument(Document) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitemphasis(_:)",
                            "title" : "func visitEmphasis(Emphasis) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitemphasis(_:)-6z3no",
                            "title" : "func visitEmphasis(Emphasis) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitemphasis(_:)-6xyul",
                    "title" : "func visitEmphasis(Emphasis) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visithtmlblock(_:)",
                            "title" : "func visitHTMLBlock(HTMLBlock) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visithtmlblock(_:)-83l09",
                            "title" : "func visitHTMLBlock(HTMLBlock) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visithtmlblock(_:)-3erep",
                    "title" : "func visitHTMLBlock(HTMLBlock) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitheading(_:)",
                            "title" : "func visitHeading(Heading) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitheading(_:)-8ga7t",
                            "title" : "func visitHeading(Heading) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitheading(_:)-q8bz",
                    "title" : "func visitHeading(Heading) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitimage(_:)",
                            "title" : "func visitImage(Image) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitimage(_:)-5bjld",
                            "title" : "func visitImage(Image) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitimage(_:)-9ignf",
                    "title" : "func visitImage(Image) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitinlinecode(_:)",
                            "title" : "func visitInlineCode(InlineCode) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitinlinecode(_:)-1lx2j",
                            "title" : "func visitInlineCode(InlineCode) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitinlinecode(_:)-4or1d",
                    "title" : "func visitInlineCode(InlineCode) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitinlinehtml(_:)",
                            "title" : "func visitInlineHTML(InlineHTML) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitinlinehtml(_:)-4cjye",
                            "title" : "func visitInlineHTML(InlineHTML) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitinlinehtml(_:)-88m8p",
                    "title" : "func visitInlineHTML(InlineHTML) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitlinebreak(_:)",
                            "title" : "func visitLineBreak(LineBreak) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitlinebreak(_:)-4r8nl",
                            "title" : "func visitLineBreak(LineBreak) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitlinebreak(_:)-24ixj",
                    "title" : "func visitLineBreak(LineBreak) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitlink(_:)",
                            "title" : "func visitLink(Link) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitlink(_:)-1qxxs",
                            "title" : "func visitLink(Link) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitlink(_:)-4vvz5",
                    "title" : "func visitLink(Link) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitlistitem(_:)",
                            "title" : "func visitListItem(ListItem) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitlistitem(_:)-8berm",
                            "title" : "func visitListItem(ListItem) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitlistitem(_:)-74lin",
                    "title" : "func visitListItem(ListItem) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitorderedlist(_:)",
                            "title" : "func visitOrderedList(OrderedList) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitorderedlist(_:)-9jqk8",
                            "title" : "func visitOrderedList(OrderedList) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitorderedlist(_:)-3smpi",
                    "title" : "func visitOrderedList(OrderedList) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitparagraph(_:)",
                            "title" : "func visitParagraph(Paragraph) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitparagraph(_:)-13o62",
                            "title" : "func visitParagraph(Paragraph) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitparagraph(_:)-9qdeg",
                    "title" : "func visitParagraph(Paragraph) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitsoftbreak(_:)",
                            "title" : "func visitSoftBreak(SoftBreak) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitsoftbreak(_:)-ivop",
                            "title" : "func visitSoftBreak(SoftBreak) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitsoftbreak(_:)-4hgz3",
                    "title" : "func visitSoftBreak(SoftBreak) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitstrikethrough(_:)-4p10l",
                            "title" : "func visitStrikethrough(Strikethrough) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitstrikethrough(_:)-3eagc",
                    "title" : "func visitStrikethrough(Strikethrough) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitstrong(_:)",
                            "title" : "func visitStrong(Strong) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitstrong(_:)-6mmnf",
                            "title" : "func visitStrong(Strong) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitstrong(_:)-54sa6",
                    "title" : "func visitStrong(Strong) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitsymbollink(_:)-746mi",
                            "title" : "func visitSymbolLink(SymbolLink) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitsymbollink(_:)-1wg2z",
                    "title" : "func visitSymbolLink(SymbolLink) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visittable(_:)-4i065",
                            "title" : "func visitTable(Table) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visittable(_:)-1ok7w",
                    "title" : "func visitTable(Table) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visittablebody(_:)-472jn",
                            "title" : "func visitTableBody(Table.Body) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visittablebody(_:)-68izi",
                    "title" : "func visitTableBody(Table.Body) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visittablecell(_:)-75oke",
                            "title" : "func visitTableCell(Table.Cell) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visittablecell(_:)-d1xl",
                    "title" : "func visitTableCell(Table.Cell) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visittablehead(_:)-2ah2v",
                            "title" : "func visitTableHead(Table.Head) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visittablehead(_:)-79b12",
                    "title" : "func visitTableHead(Table.Head) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visittablerow(_:)-36srr",
                            "title" : "func visitTableRow(Table.Row) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visittablerow(_:)-4fdbv",
                    "title" : "func visitTableRow(Table.Row) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visittext(_:)",
                            "title" : "func visitText(Text) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visittext(_:)-2odj7",
                            "title" : "func visitText(Text) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visittext(_:)-25aea",
                    "title" : "func visitText(Text) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitthematicbreak(_:)",
                            "title" : "func visitThematicBreak(ThematicBreak) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitthematicbreak(_:)-46ir6",
                            "title" : "func visitThematicBreak(ThematicBreak) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitthematicbreak(_:)-18gur",
                    "title" : "func visitThematicBreak(ThematicBreak) -> Self.Result",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markuprewriter\/visitunorderedlist(_:)",
                            "title" : "func visitUnorderedList(UnorderedList) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupRewriter Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/markdown\/markupvisitor\/visitunorderedlist(_:)-8dv6s",
                            "title" : "func visitUnorderedList(UnorderedList) -> Self.Result",
                            "type" : "method"
                          }
                        ],
                        "title" : "MarkupVisitor Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupvisitor\/visitunorderedlist(_:)-7yb6z",
                    "title" : "func visitUnorderedList(UnorderedList) -> Self.Result",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/markupvisitor",
                "title" : "MarkupVisitor",
                "type" : "protocol"
              },
              {
                "title" : "Walker",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupwalker\/descendinto(_:)",
                    "title" : "func descendInto(Markup)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/markupwalker",
                "title" : "MarkupWalker",
                "type" : "protocol"
              },
              {
                "title" : "Rewriter",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/markuprewriter",
                "title" : "MarkupRewriter",
                "type" : "protocol"
              }
            ],
            "path" : "\/documentation\/markdown\/visitmarkup",
            "title" : "Visiting Markup",
            "type" : "symbol"
          },
          {
            "children" : [
              {
                "title" : "Formatter",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/init(maxlength:breakwith:)",
                            "title" : "init(maxLength: Int, breakWith: MarkupFormatter.Options.PreferredLineLimit.SplittingElement)",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/linesplittingelement",
                            "title" : "var lineSplittingElement: MarkupFormatter.Options.PreferredLineLimit.SplittingElement",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/maxlength",
                            "title" : "var maxLength: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Enumerations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Enumeration Cases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/hardbreak",
                                "title" : "case hardBreak",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/softbreak",
                                "title" : "case softBreak",
                                "type" : "case"
                              },
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/init(rawvalue:)",
                                "title" : "init?(rawValue: String)",
                                "type" : "init"
                              },
                              {
                                "title" : "Default Implementations",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Operators",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/!=(_:_:)",
                                    "title" : "static func != (Self, Self) -> Bool",
                                    "type" : "op"
                                  }
                                ],
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/equatable-implementations",
                                "title" : "Equatable Implementations",
                                "type" : "symbol"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Properties",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/hashvalue",
                                    "title" : "var hashValue: Int",
                                    "type" : "property"
                                  },
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/hash(into:)",
                                    "title" : "func hash(into: inout Hasher)",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement\/rawrepresentable-implementations",
                                "title" : "RawRepresentable Implementations",
                                "type" : "symbol"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit\/splittingelement",
                            "title" : "MarkupFormatter.Options.PreferredLineLimit.SplittingElement",
                            "type" : "enum"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredlinelimit",
                        "title" : "MarkupFormatter.Options.PreferredLineLimit",
                        "type" : "struct"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/init(unorderedlistmarker:orderedlistnumerals:usecodefence:defaultcodeblocklanguage:thematicbreakcharacter:thematicbreaklength:emphasismarker:condenseautolinks:preferredheadingstyle:preferredlinelimit:customlineprefix:)",
                        "title" : "init(unorderedListMarker: MarkupFormatter.Options.UnorderedListMarker, orderedListNumerals: MarkupFormatter.Options.OrderedListNumerals, useCodeFence: MarkupFormatter.Options.UseCodeFence, defaultCodeBlockLanguage: String?, thematicBreakCharacter: MarkupFormatter.Options.ThematicBreakCharacter, thematicBreakLength: UInt, emphasisMarker: MarkupFormatter.Options.EmphasisMarker, condenseAutolinks: Bool, preferredHeadingStyle: MarkupFormatter.Options.PreferredHeadingStyle, preferredLineLimit: MarkupFormatter.Options.PreferredLineLimit?, customLinePrefix: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/default",
                        "title" : "static let `default`: MarkupFormatter.Options",
                        "type" : "property"
                      },
                      {
                        "title" : "Enumerations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/star",
                            "title" : "case star",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/underline",
                            "title" : "case underline",
                            "type" : "case"
                          },
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/emphasismarker",
                        "title" : "MarkupFormatter.Options.EmphasisMarker",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/orderedlistnumerals\/allsame(_:)",
                            "title" : "case allSame(UInt)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/orderedlistnumerals\/incrementing(start:)",
                            "title" : "case incrementing(start: UInt)",
                            "type" : "case"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/orderedlistnumerals",
                        "title" : "MarkupFormatter.Options.OrderedListNumerals",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/atx",
                            "title" : "case atx",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/setext",
                            "title" : "case setext",
                            "type" : "case"
                          },
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/preferredheadingstyle",
                        "title" : "MarkupFormatter.Options.PreferredHeadingStyle",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/dash",
                            "title" : "case dash",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/star",
                            "title" : "case star",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/underline",
                            "title" : "case underline",
                            "type" : "case"
                          },
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/thematicbreakcharacter",
                        "title" : "MarkupFormatter.Options.ThematicBreakCharacter",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/dash",
                            "title" : "case dash",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/plus",
                            "title" : "case plus",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/star",
                            "title" : "case star",
                            "type" : "case"
                          },
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/unorderedlistmarker",
                        "title" : "MarkupFormatter.Options.UnorderedListMarker",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/always",
                            "title" : "case always",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/never",
                            "title" : "case never",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/onlywhenlanguageispresent",
                            "title" : "case onlyWhenLanguageIsPresent",
                            "type" : "case"
                          },
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/markdown\/markupformatter\/options\/usecodefence",
                        "title" : "MarkupFormatter.Options.UseCodeFence",
                        "type" : "enum"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupformatter\/options",
                    "title" : "MarkupFormatter.Options",
                    "type" : "struct"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/init(formattingoptions:)",
                    "title" : "init(formattingOptions: MarkupFormatter.Options)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/formattingoptions",
                    "title" : "var formattingOptions: MarkupFormatter.Options",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/result",
                    "title" : "var result: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/defaultvisit(_:)",
                    "title" : "func defaultVisit(Markup)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitblockdirective(_:)-1siyt",
                    "title" : "func visitBlockDirective(BlockDirective)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitblockquote(_:)-8ip9b",
                    "title" : "func visitBlockQuote(BlockQuote)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitcodeblock(_:)-8r9r6",
                    "title" : "func visitCodeBlock(CodeBlock)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitdocument(_:)-9cuj6",
                    "title" : "func visitDocument(Document)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitemphasis(_:)-15nif",
                    "title" : "func visitEmphasis(Emphasis)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visithtmlblock(_:)-ls2u",
                    "title" : "func visitHTMLBlock(HTMLBlock)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitheading(_:)-6t30l",
                    "title" : "func visitHeading(Heading)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitimage(_:)-8wtsr",
                    "title" : "func visitImage(Image)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitinlinecode(_:)-7hrq5",
                    "title" : "func visitInlineCode(InlineCode)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitinlinehtml(_:)-7od9q",
                    "title" : "func visitInlineHTML(InlineHTML)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitlinebreak(_:)-845gk",
                    "title" : "func visitLineBreak(LineBreak)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitlink(_:)-3amk7",
                    "title" : "func visitLink(Link)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitlistitem(_:)-918qg",
                    "title" : "func visitListItem(ListItem)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitorderedlist(_:)-6m4d0",
                    "title" : "func visitOrderedList(OrderedList)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitparagraph(_:)-95ntz",
                    "title" : "func visitParagraph(Paragraph)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitsoftbreak(_:)-19yil",
                    "title" : "func visitSoftBreak(SoftBreak)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitstrikethrough(_:)-7czuv",
                    "title" : "func visitStrikethrough(Strikethrough)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitstrong(_:)-4f6dw",
                    "title" : "func visitStrong(Strong)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitsymbollink(_:)-35506",
                    "title" : "func visitSymbolLink(SymbolLink)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visittable(_:)-61rlp",
                    "title" : "func visitTable(Table)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visittablebody(_:)-4ix1e",
                    "title" : "func visitTableBody(Table.Body)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visittablecell(_:)-1k80l",
                    "title" : "func visitTableCell(Table.Cell)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visittablehead(_:)-1pg1o",
                    "title" : "func visitTableHead(Table.Head)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visittablerow(_:)-8a2f5",
                    "title" : "func visitTableRow(Table.Row)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visittext(_:)-3ujdt",
                    "title" : "func visitText(Text)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitthematicbreak(_:)-zo6h",
                    "title" : "func visitThematicBreak(ThematicBreak)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupformatter\/visitunorderedlist(_:)-78tg8",
                    "title" : "func visitUnorderedList(UnorderedList)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visit(_:)",
                        "title" : "func visit(Markup) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitblockdirective(_:)-9b8xm",
                        "title" : "func visitBlockDirective(BlockDirective) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitblockquote(_:)-7t27k",
                        "title" : "func visitBlockQuote(BlockQuote) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitcodeblock(_:)-8k4qf",
                        "title" : "func visitCodeBlock(CodeBlock) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitcustomblock(_:)",
                        "title" : "func visitCustomBlock(CustomBlock) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitcustominline(_:)",
                        "title" : "func visitCustomInline(CustomInline) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitdocument(_:)-6yr2n",
                        "title" : "func visitDocument(Document) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitemphasis(_:)-94w5f",
                        "title" : "func visitEmphasis(Emphasis) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visithtmlblock(_:)-45dmh",
                        "title" : "func visitHTMLBlock(HTMLBlock) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitheading(_:)-645x7",
                        "title" : "func visitHeading(Heading) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitimage(_:)-tl2q",
                        "title" : "func visitImage(Image) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitinlinecode(_:)-44094",
                        "title" : "func visitInlineCode(InlineCode) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitinlinehtml(_:)-6p79n",
                        "title" : "func visitInlineHTML(InlineHTML) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitlinebreak(_:)-2he9e",
                        "title" : "func visitLineBreak(LineBreak) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitlink(_:)-6xgvy",
                        "title" : "func visitLink(Link) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitlistitem(_:)-1v29t",
                        "title" : "func visitListItem(ListItem) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitorderedlist(_:)-7jkkw",
                        "title" : "func visitOrderedList(OrderedList) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitparagraph(_:)-6qad8",
                        "title" : "func visitParagraph(Paragraph) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitsoftbreak(_:)-9ftdt",
                        "title" : "func visitSoftBreak(SoftBreak) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitstrikethrough(_:)-5iqtt",
                        "title" : "func visitStrikethrough(Strikethrough) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitstrong(_:)-216bw",
                        "title" : "func visitStrong(Strong) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitsymbollink(_:)-p7ih",
                        "title" : "func visitSymbolLink(SymbolLink) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visittable(_:)-7jz1g",
                        "title" : "func visitTable(Table) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visittablebody(_:)-7oqm",
                        "title" : "func visitTableBody(Table.Body) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visittablecell(_:)-5uqov",
                        "title" : "func visitTableCell(Table.Cell) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visittablehead(_:)-2o7g0",
                        "title" : "func visitTableHead(Table.Head) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visittablerow(_:)-1kn2t",
                        "title" : "func visitTableRow(Table.Row) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visittext(_:)-520em",
                        "title" : "func visitText(Text) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitthematicbreak(_:)-2vtok",
                        "title" : "func visitThematicBreak(ThematicBreak) -> Self.Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/visitunorderedlist(_:)-49ln0",
                        "title" : "func visitUnorderedList(UnorderedList) -> Self.Result",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupformatter\/markupvisitor-implementations",
                    "title" : "MarkupVisitor Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupformatter\/descendinto(_:)",
                        "title" : "func descendInto(Markup)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupformatter\/markupwalker-implementations",
                    "title" : "MarkupWalker Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/markupformatter",
                "title" : "MarkupFormatter",
                "type" : "struct"
              },
              {
                "title" : "Options",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/init(rawvalue:)",
                    "title" : "init(rawValue: UInt)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/rawvalue",
                    "title" : "let rawValue: UInt",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/printeverything",
                    "title" : "static let printEverything: MarkupDumpOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/printsourcelocations",
                    "title" : "static let printSourceLocations: MarkupDumpOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/printuniqueidentifiers",
                    "title" : "static let printUniqueIdentifiers: MarkupDumpOptions",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/contains(_:)",
                        "title" : "func contains(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/formintersection(_:)",
                        "title" : "func formIntersection(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/formsymmetricdifference(_:)",
                        "title" : "func formSymmetricDifference(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/formunion(_:)",
                        "title" : "func formUnion(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/insert(_:)",
                        "title" : "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/intersection(_:)",
                        "title" : "func intersection(Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/remove(_:)",
                        "title" : "func remove(Self.Element) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/symmetricdifference(_:)",
                        "title" : "func symmetricDifference(Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/union(_:)",
                        "title" : "func union(Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/update(with:)",
                        "title" : "func update(with: Self.Element) -> Self.Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/optionset-implementations",
                    "title" : "OptionSet Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/init(_:)",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/init(arrayliteral:)",
                        "title" : "init(arrayLiteral: Self.Element...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/isdisjoint(with:)",
                        "title" : "func isDisjoint(with: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/isstrictsubset(of:)",
                        "title" : "func isStrictSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/isstrictsuperset(of:)",
                        "title" : "func isStrictSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/issubset(of:)",
                        "title" : "func isSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/issuperset(of:)",
                        "title" : "func isSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/subtract(_:)",
                        "title" : "func subtract(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/markdown\/markupdumpoptions\/subtracting(_:)",
                        "title" : "func subtracting(Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/markdown\/markupdumpoptions\/setalgebra-implementations",
                    "title" : "SetAlgebra Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/markdown\/markupdumpoptions",
                "title" : "MarkupDumpOptions",
                "type" : "struct"
              }
            ],
            "path" : "\/documentation\/markdown\/formatterandoptions",
            "title" : "Formatter and Options",
            "type" : "symbol"
          },
          {
            "title" : "Articles",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/markdown\/blockdirectives",
            "title" : "Block Directives",
            "type" : "article"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/markdown\/basicblockcontainer\/init(_:)-465zl",
                        "title" : "init(BlockMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "title" : "BasicBlockContainer Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/markdown\/basicblockcontainer\/init(_:)-8nsxn",
                "title" : "init<Children>(Children)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/markdown\/basicblockcontainer",
            "title" : "BasicBlockContainer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/markdown\/basicinlinecontainer\/init(_:)-1ie9",
                        "title" : "init(InlineMarkup...)",
                        "type" : "init"
                      }
                    ],
                    "title" : "BasicInlineContainer Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/markdown\/basicinlinecontainer\/init(_:)-4u4py",
                "title" : "init<Children>(Children)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/markdown\/basicinlinecontainer",
            "title" : "BasicInlineContainer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/blockcontainer\/blockchildren",
                "title" : "var blockChildren: LazyMapSequence<MarkupChildren, BlockMarkup>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/blockcontainer\/replacechildreninrange(_:with:)",
                "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/blockcontainer\/setblockchildren(_:)",
                "title" : "func setBlockChildren<Items>(Items)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/markdown\/blockcontainer",
            "title" : "BlockContainer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/inlinecontainer\/inlinechildren",
                "title" : "var inlineChildren: LazyMapSequence<MarkupChildren, InlineMarkup>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/inlinecontainer\/replacechildreninrange(_:with:)",
                "title" : "func replaceChildrenInRange<Items>(Range<Int>, with: Items)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/inlinecontainer\/setinlinechildren(_:)",
                "title" : "func setInlineChildren<Items>(Items)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/markdown\/inlinecontainer",
            "title" : "InlineContainer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/markdown\/listitemcontainer\/init(_:)-l8c8",
                        "title" : "init(ListItem)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/markdown\/listitemcontainer\/init(_:)-66wys",
                        "title" : "init(ListItem...)",
                        "type" : "init"
                      }
                    ],
                    "title" : "ListItemContainer Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/markdown\/listitemcontainer\/init(_:)-7fodp",
                "title" : "init<Items>(Items)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/listitemcontainer\/listitems",
                "title" : "var listItems: LazyMapSequence<MarkupChildren, ListItem>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/listitemcontainer\/appenditem(_:)",
                "title" : "func appendItem(ListItem)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/listitemcontainer\/replaceitemsinrange(_:with:)",
                "title" : "func replaceItemsInRange<Items>(Range<Int>, with: Items)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/markdown\/listitemcontainer\/setlistitems(_:)",
                "title" : "func setListItems<Items>(Items)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/markdown\/listitemcontainer",
            "title" : "ListItemContainer",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/markdown\/recurringinlinemarkup",
            "title" : "RecurringInlineMarkup",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/parseoptions\/init(rawvalue:)",
                "title" : "init(rawValue: UInt)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/parseoptions\/rawvalue",
                "title" : "var rawValue: UInt",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/parseoptions\/parseblockdirectives",
                "title" : "static let parseBlockDirectives: ParseOptions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/markdown\/parseoptions\/parsesymbollinks",
                "title" : "static let parseSymbolLinks: ParseOptions",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/markdown\/parseoptions\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/contains(_:)",
                    "title" : "func contains(Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/formintersection(_:)",
                    "title" : "func formIntersection(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/formsymmetricdifference(_:)",
                    "title" : "func formSymmetricDifference(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/formunion(_:)",
                    "title" : "func formUnion(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/insert(_:)",
                    "title" : "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/intersection(_:)",
                    "title" : "func intersection(Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/remove(_:)",
                    "title" : "func remove(Self.Element) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/symmetricdifference(_:)",
                    "title" : "func symmetricDifference(Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/union(_:)",
                    "title" : "func union(Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/update(with:)",
                    "title" : "func update(with: Self.Element) -> Self.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/parseoptions\/optionset-implementations",
                "title" : "OptionSet Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/init(_:)",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Self.Element...)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/isdisjoint(with:)",
                    "title" : "func isDisjoint(with: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/isstrictsubset(of:)",
                    "title" : "func isStrictSubset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/isstrictsuperset(of:)",
                    "title" : "func isStrictSuperset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/issubset(of:)",
                    "title" : "func isSubset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/issuperset(of:)",
                    "title" : "func isSuperset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/subtract(_:)",
                    "title" : "func subtract(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/parseoptions\/subtracting(_:)",
                    "title" : "func subtracting(Self) -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/parseoptions\/setalgebra-implementations",
                "title" : "SetAlgebra Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/parseoptions",
            "title" : "ParseOptions",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/markdown\/rawmarkupheader",
            "title" : "RawMarkupHeader",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/iterator\/next()",
                    "title" : "func next() -> Markup?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/reversedmarkupchildren\/iterator",
                "title" : "ReversedMarkupChildren.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/reversedmarkupchildren\/makeiterator()",
                "title" : "func makeIterator() -> ReversedMarkupChildren.Iterator",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/flatmap(_:)-1pkwd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/flatmap(_:)-8eebk",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/map(_:)",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/sorted(using:)-3a2bw",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/sorted(using:)-4qp4k",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/markdown\/reversedmarkupchildren\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/markdown\/reversedmarkupchildren\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/reversedmarkupchildren",
            "title" : "ReversedMarkupChildren",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/markdown\/checkbox\/checked",
                "title" : "case checked",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/markdown\/checkbox\/unchecked",
                "title" : "case unchecked",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/markdown\/checkbox\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/markdown\/checkbox\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/markdown\/checkbox",
            "title" : "Checkbox",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/markdown",
        "title" : "Markdown",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 0
  }
}