{
  "abstract" : [
    {
      "text" : "Swift ",
      "type" : "text"
    },
    {
      "code" : "Markdown",
      "type" : "codeVoice"
    },
    {
      "text" : " is a Swift package for parsing, building, editing, and analyzing Markdown documents.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Markdown\/documentation\/Markdown"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "Markdown",
    "modules" : [
      {
        "name" : "Markdown"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "Markdown"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The parser is powered by GitHub-flavored Markdown’s ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/github\/cmark-gfm",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " implementation, so it follows the spec closely. As the needs of the community change, the effective dialect implemented by this library may change.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The markup tree provided by this package is comprised of immutable\/persistent, thread-safe, copy-on-write value types that only copy substructure that has changed. Other examples of the main strategy behind this library can be seen in Swift’s ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/apple\/swift\/tree\/master\/lib\/Syntax",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and its Swift bindings, ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/apple\/swift-syntax",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/Parsing-Building-and-Modifying-Markup-Trees",
        "doc:\/\/Markdown\/documentation\/Markdown\/Visitors-Walkers-and-Rewriters"
      ],
      "title" : "Getting Started"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/Markup",
        "doc:\/\/Markdown\/documentation\/Markdown\/MarkupChildren",
        "doc:\/\/Markdown\/documentation\/Markdown\/ChildIndexPath",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath",
        "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgument",
        "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgumentText",
        "doc:\/\/Markdown\/documentation\/Markdown\/Document",
        "doc:\/\/Markdown\/documentation\/Markdown\/LiteralMarkup",
        "doc:\/\/Markdown\/documentation\/Markdown\/PlainTextConvertibleMarkup"
      ],
      "title" : "Essentials"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/BlockMarkup",
        "doc:\/\/Markdown\/documentation\/Markdown\/InlineMarkup",
        "doc:\/\/Markdown\/documentation\/Markdown\/Aside"
      ],
      "title" : "Markup Types"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/Infrastructure"
      ],
      "title" : "Infrastructure"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/VisitMarkup",
        "doc:\/\/Markdown\/documentation\/Markdown\/FormatterAndOptions"
      ],
      "title" : "Visit Markup"
    },
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/BlockDirectives"
      ],
      "title" : "Articles"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/BasicBlockContainer",
        "doc:\/\/Markdown\/documentation\/Markdown\/BasicInlineContainer",
        "doc:\/\/Markdown\/documentation\/Markdown\/BlockContainer",
        "doc:\/\/Markdown\/documentation\/Markdown\/InlineContainer",
        "doc:\/\/Markdown\/documentation\/Markdown\/ListItemContainer",
        "doc:\/\/Markdown\/documentation\/Markdown\/RecurringInlineMarkup"
      ],
      "title" : "Protocols"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/ParseOptions",
        "doc:\/\/Markdown\/documentation\/Markdown\/RawMarkupHeader",
        "doc:\/\/Markdown\/documentation\/Markdown\/ReversedMarkupChildren"
      ],
      "title" : "Structures"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/Checkbox"
      ],
      "title" : "Enumerations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/markdown"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Markdown/documentation/Markdown": {
  "abstract" : [
    {
      "text" : "Swift ",
      "type" : "text"
    },
    {
      "code" : "Markdown",
      "type" : "codeVoice"
    },
    {
      "text" : " is a Swift package for parsing, building, editing, and analyzing Markdown documents.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Markdown",
  "type" : "topic",
  "url" : "\/documentation\/markdown"
},
"doc://Markdown/documentation/Markdown/Aside": {
  "abstract" : [
    {
      "text" : "An auxiliary aside element interpreted from a block quote.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Aside"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Aside",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Aside"
    }
  ],
  "role" : "symbol",
  "title" : "Aside",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/aside"
},
"doc://Markdown/documentation/Markdown/BasicBlockContainer": {
  "abstract" : [
    {
      "text" : "A block element that can contain only other block elements and doesn’t require any other information.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BasicBlockContainer"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/BasicBlockContainer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BasicBlockContainer"
    }
  ],
  "role" : "symbol",
  "title" : "BasicBlockContainer",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/basicblockcontainer"
},
"doc://Markdown/documentation/Markdown/BasicInlineContainer": {
  "abstract" : [
    {
      "text" : "A block or inline markup element that can contain only ",
      "type" : "text"
    },
    {
      "code" : "InlineMarkup",
      "type" : "codeVoice"
    },
    {
      "text" : " elements and doesn’t require any other information.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BasicInlineContainer"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/BasicInlineContainer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BasicInlineContainer"
    }
  ],
  "role" : "symbol",
  "title" : "BasicInlineContainer",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/basicinlinecontainer"
},
"doc://Markdown/documentation/Markdown/BlockContainer": {
  "abstract" : [
    {
      "text" : "A block element whose children must conform to ",
      "type" : "text"
    },
    {
      "code" : "BlockMarkup",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BlockContainer"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/BlockContainer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BlockContainer"
    }
  ],
  "role" : "symbol",
  "title" : "BlockContainer",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/blockcontainer"
},
"doc://Markdown/documentation/Markdown/BlockDirectives": {
  "abstract" : [
    {
      "text" : "Block directives are a syntax extension that create attributed containers to hold other block elements, such as paragraphs and lists, or even other block directives. Here is what one looks like:",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/BlockDirectives",
  "kind" : "article",
  "role" : "article",
  "title" : "Block Directives",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/blockdirectives"
},
"doc://Markdown/documentation/Markdown/BlockMarkup": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/BlockMarkup",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Markup Block Nodes",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/blockmarkup"
},
"doc://Markdown/documentation/Markdown/Checkbox": {
  "abstract" : [
    {
      "text" : "A checkbox that can represent an on\/off state.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Checkbox"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Checkbox",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Checkbox"
    }
  ],
  "role" : "symbol",
  "title" : "Checkbox",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/checkbox"
},
"doc://Markdown/documentation/Markdown/ChildIndexPath": {
  "abstract" : [
    {
      "text" : "An array of indexes for traversing deeply into a markup tree.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ChildIndexPath"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/ChildIndexPath",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ChildIndexPath"
    }
  ],
  "role" : "symbol",
  "title" : "ChildIndexPath",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/childindexpath"
},
"doc://Markdown/documentation/Markdown/DirectiveArgument": {
  "abstract" : [
    {
      "text" : "A directive argument, parsed from the form ",
      "type" : "text"
    },
    {
      "code" : "name: value",
      "type" : "codeVoice"
    },
    {
      "text" : " or ",
      "type" : "text"
    },
    {
      "code" : "name: \"value\"",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DirectiveArgument"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgument",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DirectiveArgument"
    }
  ],
  "role" : "symbol",
  "title" : "DirectiveArgument",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/directiveargument"
},
"doc://Markdown/documentation/Markdown/DirectiveArgumentText": {
  "abstract" : [
    {
      "text" : "The argument text provided to a directive, which can be parsed",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "into various kinds of arguments.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DirectiveArgumentText"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgumentText",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DirectiveArgumentText"
    }
  ],
  "role" : "symbol",
  "title" : "DirectiveArgumentText",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/directiveargumenttext"
},
"doc://Markdown/documentation/Markdown/Document": {
  "abstract" : [
    {
      "text" : "A markup element representing the top level of a whole document.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Document"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Document",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Document"
    }
  ],
  "role" : "symbol",
  "title" : "Document",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/document"
},
"doc://Markdown/documentation/Markdown/FormatterAndOptions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/FormatterAndOptions",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Formatter and Options",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/formatterandoptions"
},
"doc://Markdown/documentation/Markdown/Infrastructure": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Infrastructure",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Infrastructure",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/infrastructure"
},
"doc://Markdown/documentation/Markdown/InlineContainer": {
  "abstract" : [
    {
      "text" : "An element whose children must conform to ",
      "type" : "text"
    },
    {
      "code" : "InlineMarkup",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "InlineContainer"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/InlineContainer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "InlineContainer"
    }
  ],
  "role" : "symbol",
  "title" : "InlineContainer",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/inlinecontainer"
},
"doc://Markdown/documentation/Markdown/InlineMarkup": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/InlineMarkup",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Markup Inline Nodes",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/inlinemarkup"
},
"doc://Markdown/documentation/Markdown/ListItemContainer": {
  "abstract" : [
    {
      "text" : "A markup element that can contain only ",
      "type" : "text"
    },
    {
      "code" : "ListItem",
      "type" : "codeVoice"
    },
    {
      "text" : "s as children and require no other information.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ListItemContainer"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/ListItemContainer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ListItemContainer"
    }
  ],
  "role" : "symbol",
  "title" : "ListItemContainer",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/listitemcontainer"
},
"doc://Markdown/documentation/Markdown/LiteralMarkup": {
  "abstract" : [
    {
      "text" : "An element that is represented with just some plain text.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LiteralMarkup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/LiteralMarkup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LiteralMarkup"
    }
  ],
  "role" : "symbol",
  "title" : "LiteralMarkup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/literalmarkup"
},
"doc://Markdown/documentation/Markdown/Markup": {
  "abstract" : [
    {
      "text" : "A markup element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Markup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Markup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Markup"
    }
  ],
  "role" : "symbol",
  "title" : "Markup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markup"
},
"doc://Markdown/documentation/Markdown/MarkupChildren": {
  "abstract" : [
    {
      "text" : "A lazy sequence consisting of an element’s child elements.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MarkupChildren"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupChildren",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MarkupChildren"
    }
  ],
  "role" : "symbol",
  "title" : "MarkupChildren",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markupchildren"
},
"doc://Markdown/documentation/Markdown/ParseOptions": {
  "abstract" : [
    {
      "text" : "Options for parsing Markdown.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParseOptions"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/ParseOptions",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParseOptions"
    }
  ],
  "role" : "symbol",
  "title" : "ParseOptions",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/parseoptions"
},
"doc://Markdown/documentation/Markdown/Parsing-Building-and-Modifying-Markup-Trees": {
  "abstract" : [
    {
      "text" : "Get started with Swift-Markdown’s markup trees.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Parsing-Building-and-Modifying-Markup-Trees",
  "kind" : "article",
  "role" : "article",
  "title" : "Parsing, Building, and Modifying Markup Trees",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/parsing-building-and-modifying-markup-trees"
},
"doc://Markdown/documentation/Markdown/PlainTextConvertibleMarkup": {
  "abstract" : [
    {
      "text" : "An element that can be converted to plain text without formatting.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "PlainTextConvertibleMarkup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/PlainTextConvertibleMarkup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "PlainTextConvertibleMarkup"
    }
  ],
  "role" : "symbol",
  "title" : "PlainTextConvertibleMarkup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/plaintextconvertiblemarkup"
},
"doc://Markdown/documentation/Markdown/RawMarkupHeader": {
  "abstract" : [
    {
      "text" : "The header for the ",
      "type" : "text"
    },
    {
      "code" : "RawMarkup",
      "type" : "codeVoice"
    },
    {
      "text" : " managed buffer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RawMarkupHeader"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/RawMarkupHeader",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RawMarkupHeader"
    }
  ],
  "role" : "symbol",
  "title" : "RawMarkupHeader",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/rawmarkupheader"
},
"doc://Markdown/documentation/Markdown/RecurringInlineMarkup": {
  "abstract" : [
    {
      "text" : "An inline element that can recur throughout any structure.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RecurringInlineMarkup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/RecurringInlineMarkup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RecurringInlineMarkup"
    }
  ],
  "role" : "symbol",
  "title" : "RecurringInlineMarkup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/recurringinlinemarkup"
},
"doc://Markdown/documentation/Markdown/ReversedMarkupChildren": {
  "abstract" : [
    {
      "text" : "A sequence consisting of an element’s child elements in reverse.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ReversedMarkupChildren"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/ReversedMarkupChildren",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ReversedMarkupChildren"
    }
  ],
  "role" : "symbol",
  "title" : "ReversedMarkupChildren",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/reversedmarkupchildren"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath": {
  "abstract" : [
    {
      "text" : "A description of a traversal through a markup tree by index and optional expected type.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TypedChildIndexPath"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TypedChildIndexPath"
    }
  ],
  "role" : "symbol",
  "title" : "TypedChildIndexPath",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath"
},
"doc://Markdown/documentation/Markdown/VisitMarkup": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/VisitMarkup",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Visiting Markup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/visitmarkup"
},
"doc://Markdown/documentation/Markdown/Visitors-Walkers-and-Rewriters": {
  "abstract" : [
    {
      "text" : "Use ",
      "type" : "text"
    },
    {
      "code" : "MarkupVisitor",
      "type" : "codeVoice"
    },
    {
      "text" : " to transform, walk, and rewrite markup trees.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Visitors-Walkers-and-Rewriters",
  "kind" : "article",
  "role" : "article",
  "title" : "Visitors, Walkers, and Rewriters",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/visitors-walkers-and-rewriters"
},
"https://github.com/apple/swift-syntax": {
  "identifier" : "https:\/\/github.com\/apple\/swift-syntax",
  "title" : "SwiftSyntax",
  "titleInlineContent" : [
    {
      "text" : "SwiftSyntax",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/apple\/swift-syntax"
},
"https://github.com/apple/swift/tree/master/lib/Syntax": {
  "identifier" : "https:\/\/github.com\/apple\/swift\/tree\/master\/lib\/Syntax",
  "title" : "lib\/Syntax",
  "titleInlineContent" : [
    {
      "text" : "lib\/Syntax",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/apple\/swift\/tree\/master\/lib\/Syntax"
},
"https://github.com/github/cmark-gfm": {
  "identifier" : "https:\/\/github.com\/github\/cmark-gfm",
  "title" : "cmark-gfm",
  "titleInlineContent" : [
    {
      "text" : "cmark-gfm",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/github\/cmark-gfm"
}
}
}