{
  "abstract" : [
    {
      "text" : "A description of a traversal through a markup tree by index and optional expected type.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Markdown\/documentation\/Markdown"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:8Markdown19TypedChildIndexPathV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "TypedChildIndexPath"
      }
    ],
    "modules" : [
      {
        "name" : "Markdown"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "TypedChildIndexPath"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "TypedChildIndexPath"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "TypedChildIndexPath"
            }
          ]
        }
      ],
      "kind" : "declarations"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/Markdown\/SK",
        "doc:\/\/Markdown\/Sl",
        "doc:\/\/Markdown\/s25ExpressibleByArrayLiteralP",
        "doc:\/\/Markdown\/Sk",
        "doc:\/\/Markdown\/ST"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/Markup",
        "doc:\/\/Markdown\/documentation\/Markdown\/MarkupChildren",
        "doc:\/\/Markdown\/documentation\/Markdown\/ChildIndexPath",
        "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgument",
        "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgumentText",
        "doc:\/\/Markdown\/documentation\/Markdown\/Document",
        "doc:\/\/Markdown\/documentation\/Markdown\/LiteralMarkup",
        "doc:\/\/Markdown\/documentation\/Markdown\/PlainTextConvertibleMarkup"
      ],
      "title" : "Essentials"
    }
  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/Element"
      ],
      "title" : "Structures"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/init()",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/init(_:)",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/init(arrayLiteral:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/endIndex",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/startIndex"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/subscript(_:)-43ttc"
      ],
      "title" : "Subscripts"
    },
    {
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/ArrayLiteralElement"
      ],
      "title" : "Type Aliases"
    },
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/BidirectionalCollection-Implementations",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/Collection-Implementations",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/RandomAccessCollection-Implementations",
        "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/Sequence-Implementations"
      ],
      "title" : "Default Implementations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/markdown\/typedchildindexpath"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Markdown/SK": {
  "identifier" : "doc:\/\/Markdown\/SK",
  "title" : "Swift.BidirectionalCollection",
  "type" : "unresolvable"
},
"doc://Markdown/ST": {
  "identifier" : "doc:\/\/Markdown\/ST",
  "title" : "Swift.Sequence",
  "type" : "unresolvable"
},
"doc://Markdown/Sk": {
  "identifier" : "doc:\/\/Markdown\/Sk",
  "title" : "Swift.RandomAccessCollection",
  "type" : "unresolvable"
},
"doc://Markdown/Sl": {
  "identifier" : "doc:\/\/Markdown\/Sl",
  "title" : "Swift.Collection",
  "type" : "unresolvable"
},
"doc://Markdown/documentation/Markdown": {
  "abstract" : [
    {
      "text" : "Swift ",
      "type" : "text"
    },
    {
      "code" : "Markdown",
      "type" : "codeVoice"
    },
    {
      "text" : " is a Swift package for parsing, building, editing, and analyzing Markdown documents.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Markdown",
  "type" : "topic",
  "url" : "\/documentation\/markdown"
},
"doc://Markdown/documentation/Markdown/ChildIndexPath": {
  "abstract" : [
    {
      "text" : "An array of indexes for traversing deeply into a markup tree.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ChildIndexPath"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/ChildIndexPath",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ChildIndexPath"
    }
  ],
  "role" : "symbol",
  "title" : "ChildIndexPath",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/childindexpath"
},
"doc://Markdown/documentation/Markdown/DirectiveArgument": {
  "abstract" : [
    {
      "text" : "A directive argument, parsed from the form ",
      "type" : "text"
    },
    {
      "code" : "name: value",
      "type" : "codeVoice"
    },
    {
      "text" : " or ",
      "type" : "text"
    },
    {
      "code" : "name: \"value\"",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DirectiveArgument"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgument",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DirectiveArgument"
    }
  ],
  "role" : "symbol",
  "title" : "DirectiveArgument",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/directiveargument"
},
"doc://Markdown/documentation/Markdown/DirectiveArgumentText": {
  "abstract" : [
    {
      "text" : "The argument text provided to a directive, which can be parsed",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "into various kinds of arguments.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DirectiveArgumentText"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/DirectiveArgumentText",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DirectiveArgumentText"
    }
  ],
  "role" : "symbol",
  "title" : "DirectiveArgumentText",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/directiveargumenttext"
},
"doc://Markdown/documentation/Markdown/Document": {
  "abstract" : [
    {
      "text" : "A markup element representing the top level of a whole document.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Document"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Document",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Document"
    }
  ],
  "role" : "symbol",
  "title" : "Document",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/document"
},
"doc://Markdown/documentation/Markdown/LiteralMarkup": {
  "abstract" : [
    {
      "text" : "An element that is represented with just some plain text.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LiteralMarkup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/LiteralMarkup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LiteralMarkup"
    }
  ],
  "role" : "symbol",
  "title" : "LiteralMarkup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/literalmarkup"
},
"doc://Markdown/documentation/Markdown/Markup": {
  "abstract" : [
    {
      "text" : "A markup element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Markup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Markup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Markup"
    }
  ],
  "role" : "symbol",
  "title" : "Markup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markup"
},
"doc://Markdown/documentation/Markdown/MarkupChildren": {
  "abstract" : [
    {
      "text" : "A lazy sequence consisting of an element’s child elements.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MarkupChildren"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupChildren",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MarkupChildren"
    }
  ],
  "role" : "symbol",
  "title" : "MarkupChildren",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markupchildren"
},
"doc://Markdown/documentation/Markdown/PlainTextConvertibleMarkup": {
  "abstract" : [
    {
      "text" : "An element that can be converted to plain text without formatting.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "PlainTextConvertibleMarkup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/PlainTextConvertibleMarkup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "PlainTextConvertibleMarkup"
    }
  ],
  "role" : "symbol",
  "title" : "PlainTextConvertibleMarkup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/plaintextconvertiblemarkup"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath": {
  "abstract" : [
    {
      "text" : "A description of a traversal through a markup tree by index and optional expected type.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TypedChildIndexPath"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TypedChildIndexPath"
    }
  ],
  "role" : "symbol",
  "title" : "TypedChildIndexPath",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/ArrayLiteralElement": {
  "abstract" : [
    {
      "text" : "A pair consisting of an expected index and optional expected type for a child element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArrayLiteralElement"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/ArrayLiteralElement",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArrayLiteralElement"
    }
  ],
  "role" : "symbol",
  "title" : "TypedChildIndexPath.ArrayLiteralElement",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/arrayliteralelement"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/BidirectionalCollection-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/BidirectionalCollection-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "BidirectionalCollection Implementations",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/bidirectionalcollection-implementations"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/Collection-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/Collection-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Collection Implementations",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/collection-implementations"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/Element": {
  "abstract" : [
    {
      "text" : "An element of a complex child index path.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Element"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/Element",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Element"
    }
  ],
  "role" : "symbol",
  "title" : "TypedChildIndexPath.Element",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/element"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/RandomAccessCollection-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/RandomAccessCollection-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "RandomAccessCollection Implementations",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/randomaccesscollection-implementations"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/Sequence-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/Sequence-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Sequence Implementations",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/sequence-implementations"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/endIndex": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "endIndex"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/endIndex",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "endIndex",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/endindex"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/init()": {
  "abstract" : [
    {
      "text" : "Create an empty path.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/init()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init()",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/init()"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/init(_:)": {
  "abstract" : [
    {
      "text" : "Create a path from a sequence of index-type pairs.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "S"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "S"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/init(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/init(_:)"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/init(arrayLiteral:)": {
  "abstract" : [
    {
      "text" : "Create a path from a sequence of index-type pairs.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "arrayLiteral"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Markdown19TypedChildIndexPathV",
      "text" : "TypedChildIndexPath"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Markdown19TypedChildIndexPathV19ArrayLiteralElementa",
      "text" : "ArrayLiteralElement"
    },
    {
      "kind" : "text",
      "text" : "...)"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/init(arrayLiteral:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(arrayLiteral:)",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/init(arrayliteral:)"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/startIndex": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "startIndex"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/startIndex",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "startIndex",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/startindex"
},
"doc://Markdown/documentation/Markdown/TypedChildIndexPath/subscript(_:)-43ttc": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "subscript"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Markdown19TypedChildIndexPathV",
      "text" : "TypedChildIndexPath"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Markdown19TypedChildIndexPathV7ElementV",
      "text" : "Element"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/TypedChildIndexPath\/subscript(_:)-43ttc",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "subscript(_:)",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/typedchildindexpath\/subscript(_:)-43ttc"
},
"doc://Markdown/s25ExpressibleByArrayLiteralP": {
  "identifier" : "doc:\/\/Markdown\/s25ExpressibleByArrayLiteralP",
  "title" : "Swift.ExpressibleByArrayLiteral",
  "type" : "unresolvable"
}
}
}