{
  "abstract" : [
    {
      "text" : "Use ",
      "type" : "text"
    },
    {
      "code" : "MarkupVisitor",
      "type" : "codeVoice"
    },
    {
      "text" : " to transform, walk, and rewrite markup trees.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Markdown\/documentation\/Markdown"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Markdown\/documentation\/Markdown\/Visitors-Walkers-and-Rewriters"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Markdown"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Visitors, Walkers, and Rewriters"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Markup-Visitor",
          "level" : 2,
          "text" : "Markup Visitor",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The core ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupVisitor",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol provides the basis for transforming, walking, or rewriting a markup tree.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public protocol MarkupVisitor {",
            "    associatedtype Result",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using its ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupVisitor\/Result",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " type, you can transform a markup tree into anything: another markup tree, or perhaps a tree of XML or HTML elements. There are two included refinements of ",
              "type" : "text"
            },
            {
              "code" : "MarkupVisitor",
              "type" : "codeVoice"
            },
            {
              "text" : " for common uses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Markup-Walker",
          "level" : 2,
          "text" : "Markup Walker",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first refinement of ",
              "type" : "text"
            },
            {
              "code" : "MarkupVisitor",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupWalker",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", has an associated ",
              "type" : "text"
            },
            {
              "code" : "Result",
              "type" : "codeVoice"
            },
            {
              "text" : " type of ",
              "type" : "text"
            },
            {
              "code" : "Void",
              "type" : "codeVoice"
            },
            {
              "text" : ", so it’s meant for summarizing or detecting aspects of a markup tree. If you wanted to append to a string as elements are visited, this might be a good tool for that.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import Markdown",
            "",
            "\/\/\/ Counts `Link`s in a `Document`.",
            "struct LinkCounter: MarkupWalker {",
            "    var count = 0",
            "    mutating func visitLink(_ link: Link) {",
            "        if link.destination == \"https:\/\/swift.org\" {",
            "            count += 1",
            "        }",
            "        descendInto(link)",
            "    }",
            "}",
            "",
            "let source = \"There are [two](https:\/\/swift.org) links to <https:\/\/swift.org> here.\"",
            "let document = Document(parsing: source)",
            "print(document.debugDescription())",
            "var linkCounter = LinkCounter()",
            "linkCounter.visit(document)",
            "print(linkCounter.count)",
            "\/\/ 2"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Markup-Rewriter",
          "level" : 2,
          "text" : "Markup Rewriter",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second refinement, ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupRewriter",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", has an associated ",
              "type" : "text"
            },
            {
              "code" : "Result",
              "type" : "codeVoice"
            },
            {
              "text" : " type of an optional ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Markup",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " element, so it’s meant to change or even remove elements from a markup tree. You can return ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " to delete an element, or return another element to substitute in its place.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import Markdown",
            "",
            "\/\/\/ Delete all **strong** elements in a markup tree.",
            "struct StrongDeleter: MarkupRewriter {",
            "    mutating func visitStrong(_ strong: Strong) -> Markup? {",
            "        return nil",
            "    }",
            "}",
            "",
            "let source = \"Now you see me, **now you don't**\"",
            "let document = Document(parsing: source)",
            "var strongDeleter = StrongDeleter()",
            "let newDocument = strongDeleter.visit(document)",
            "",
            "print(newDocument!.debugDescription())",
            "\/\/ Document",
            "\/\/ └─ Paragraph",
            "\/\/    └─ Text \"Now you see me, \""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Markdown\/documentation\/Markdown\/Parsing-Building-and-Modifying-Markup-Trees"
      ],
      "title" : "Getting Started"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/markdown\/visitors-walkers-and-rewriters"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Markdown/documentation/Markdown": {
  "abstract" : [
    {
      "text" : "Swift ",
      "type" : "text"
    },
    {
      "code" : "Markdown",
      "type" : "codeVoice"
    },
    {
      "text" : " is a Swift package for parsing, building, editing, and analyzing Markdown documents.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Markdown",
  "type" : "topic",
  "url" : "\/documentation\/markdown"
},
"doc://Markdown/documentation/Markdown/Markup": {
  "abstract" : [
    {
      "text" : "A markup element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Markup"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Markup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Markup"
    }
  ],
  "role" : "symbol",
  "title" : "Markup",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markup"
},
"doc://Markdown/documentation/Markdown/MarkupRewriter": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "MarkupVisitor",
      "type" : "codeVoice"
    },
    {
      "text" : " with the capability to rewrite elements in the tree.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MarkupRewriter"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupRewriter",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MarkupRewriter"
    }
  ],
  "role" : "symbol",
  "title" : "MarkupRewriter",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markuprewriter"
},
"doc://Markdown/documentation/Markdown/MarkupVisitor": {
  "abstract" : [
    {
      "text" : "Visits ",
      "type" : "text"
    },
    {
      "code" : "Markup",
      "type" : "codeVoice"
    },
    {
      "text" : " elements and returns a result.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MarkupVisitor"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupVisitor",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MarkupVisitor"
    }
  ],
  "role" : "symbol",
  "title" : "MarkupVisitor",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markupvisitor"
},
"doc://Markdown/documentation/Markdown/MarkupVisitor/Result": {
  "abstract" : [
    {
      "text" : "The result type returned when visiting a element.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "associatedtype"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Result"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupVisitor\/Result",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "Result",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markupvisitor\/result"
},
"doc://Markdown/documentation/Markdown/MarkupWalker": {
  "abstract" : [
    {
      "text" : "An interface for walking a ",
      "type" : "text"
    },
    {
      "code" : "Markup",
      "type" : "codeVoice"
    },
    {
      "text" : " tree without altering it.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MarkupWalker"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/MarkupWalker",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MarkupWalker"
    }
  ],
  "role" : "symbol",
  "title" : "MarkupWalker",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/markupwalker"
},
"doc://Markdown/documentation/Markdown/Parsing-Building-and-Modifying-Markup-Trees": {
  "abstract" : [
    {
      "text" : "Get started with Swift-Markdown’s markup trees.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Markdown\/documentation\/Markdown\/Parsing-Building-and-Modifying-Markup-Trees",
  "kind" : "article",
  "role" : "article",
  "title" : "Parsing, Building, and Modifying Markup Trees",
  "type" : "topic",
  "url" : "\/documentation\/markdown\/parsing-building-and-modifying-markup-trees"
}
}
}